---
import DescripcionProyecto from '@/componentes/DescripcionProyecto.astro';
import Plantilla from '@/plantillas/Plantilla.astro';
import { gql, obtenerDatos, urlImagen } from '@/utilidades/ayudas';
import { Marked } from 'marked';
import { markedHighlight } from 'marked-highlight';
import { highlightText } from '@speed-highlight/core';
import type { ShjLanguage } from '@speed-highlight/core';
import '@speed-highlight/core/themes/github-dim.css';
import type { Proyecto } from '@/tipos';

const marked = new Marked(
  markedHighlight({
    async: true,
    langPrefix: 'shj-lang-',
    highlight: (codigo: string, lenguaje: string) => {
      return highlightText(codigo, lenguaje as ShjLanguage, true);
    },
  })
);

/**
 * Esto es de Astro específicamente para crear las rutas dinámicamente, se tiene que llamar getStaticPaths()
 * Documentación en: https://docs.astro.build/en/reference/api-reference/#getstaticpaths
 */
export async function getStaticPaths() {
  const Proyectos = gql`
    query {
      proyectos(filter: { estado: { _eq: "publicado" } }, sort: ["-date_created"]) {
        slug
      }
    }
  `;
  const { proyectos } = await obtenerDatos<{ proyectos: { slug: string }[] }>(Proyectos);

  return proyectos.map(({ slug }) => {
    return { params: { slug } };
  });
}

const { slug } = Astro.params;

const Proyecto = gql`
  query {
    proyectos(filter: { slug: { _eq: "${slug}" }, estado: {_eq: "publicado"} }, limit: 1) {
      titulo
      slug
      descripcion
      contenido
      fecha_publicacion
      date_created
      fecha_inicio
      enlace
      estado
      repos
      imagen {
        id
        title
      }
      colegas {
        colegas_id {
          nombre
          enlace
        }
      }
    }
  }
`;

const { proyectos } = await obtenerDatos<{ proyectos: Proyecto[] }>(Proyecto);
let pagina: Proyecto;

if (proyectos && proyectos.length) {
  pagina = proyectos[0];
  if (pagina.fecha_publicacion) pagina.fecha_publicacion = new Date(pagina.fecha_publicacion);
  if (pagina.date_created) pagina.fecha_publicacion = new Date(pagina.date_created);

  if (pagina.contenido && pagina.contenido.length) {
    const comando = /\/\/\/(.*?)\)/g;
    const imgsGaleria = pagina.contenido.match(comando);

    if (imgsGaleria) {
      imgsGaleria.forEach((elemento: string) => {
        const alt = elemento.match(/(?<=\[).+?(?=\])/);
        const id = elemento.match(/(?<=\().+?(?=\))/);

        const html = `<picture>
          <source media="(max-width: 396px)" srcset="https://api.enflujo.com/assets/${id}?height=150&quality=75&format=webp" />
          <source media="(max-width: 799px)" srcset="https://api.enflujo.com/assets/${id}?height=200&quality=80&format=webp" />
          <source media="(min-width: 800px)" srcset="https://api.enflujo.com/assets/${id}?height=250&quality=90&format=webp" />
          <img class='imagenGaleria' src="https://api.enflujo.com/assets/${id}?height=250&quality=90&format=webp" alt="${alt}" />
        </picture>
        `;

        pagina.contenido = pagina.contenido.replace(elemento, html);
      });
    }
  }
} else {
  return Astro.redirect('/404');
}
---

<Plantilla titulo={pagina.titulo} descripcion={pagina.descripcion} imagen={pagina.imagen}>
  <main class="pagina">
    <div id="portada">
      <div class="imagen">
        {
          pagina.imagen && pagina.imagen.id && (
            <img
              src={urlImagen(pagina.imagen.id, {
                width: 1200,
                height: 630,
                quality: 90,
                format: 'webp',
              })}
              alt={pagina.imagen.title}
              width="1200"
              height="630"
            />
          )
        }
      </div>

      <section class="contenidoPortada">
        <h1>{pagina.titulo}</h1>

        <DescripcionProyecto datos={pagina} />

        {
          pagina.enlace && (
            <a class={`enlace ${pagina.estado}`} href={pagina.enlace} target="_blank">
              Ver Proyecto
            </a>
          )
        }
      </section>
    </div>

    {
      pagina.contenido && (
        <div class="contenidoProyecto">
          <Fragment set:html={marked.parse(pagina.contenido)} />
        </div>
      )
    }
    <div id="visualizadorImagen">
      <span id="botonAnterior" class="botonGaleria">&lt;</span>
      <div id="imagenGrande"></div>
      <div class="botonesDerecha">
        <span id="cerrar">X</span>
        <span id="botonSiguiente" class="botonGaleria">&gt;</span>
      </div>
    </div>
  </main>
</Plantilla>

<script>
  const galerias = document.querySelectorAll<HTMLDivElement>('.galeria');

  if (galerias && galerias.length) {
    const visualizador = document.querySelector<HTMLDivElement>('#visualizadorImagen');
    const contenedorImgGrande = document.querySelector<HTMLDivElement>('#imagenGrande');
    const botonSiguiente = document.querySelector<HTMLDivElement>('#botonSiguiente');
    const botonAnterior = document.querySelector<HTMLDivElement>('#botonAnterior');

    galerias.forEach((galeria) => {
      if (!visualizador) return;
      const imagenesGaleria = galeria.querySelectorAll('.imagenGaleria');

      if (!botonAnterior || !botonSiguiente || !contenedorImgGrande) return;

      let imagenActual: number;

      function cargarImg() {
        const url = imagenesGaleria[imagenActual].getAttribute('src');
        if (!url || !contenedorImgGrande) return;
        const secciones = url.split('?');
        const urlNuevaImagen = `${secciones[0]}&height=800&quality=90&format=webp`;
        contenedorImgGrande.style.backgroundImage = `url("${urlNuevaImagen}")`;
      }

      botonSiguiente.onclick = () => {
        imagenActual = (imagenActual + 1) % imagenesGaleria.length;
        cargarImg();
      };

      botonAnterior.onclick = () => {
        imagenActual = imagenActual > 0 ? imagenActual - 1 : imagenesGaleria.length - 1;
        cargarImg();
      };

      imagenesGaleria.forEach((imagen, i) => {
        imagen.addEventListener('click', () => {
          if (!visualizador) return;
          imagenActual = i;
          cargarImg();
          visualizador.classList.add('visible');
        });
      });
    });

    if (visualizador) {
      visualizador.addEventListener('click', (evento) => {
        if (evento.target !== botonAnterior && evento.target !== botonSiguiente) {
          if (visualizador.classList.contains('visible')) {
            visualizador.classList.remove('visible');
          }
        }
      });
    }
  }
</script>

<style lang="scss">
  @use 'sass:color';
  @use '@/scss/constantes' as *;

  .seccionProyecto {
    margin-top: 1em;
  }

  .enlace,
  .enlace:link {
    padding: 0.5em;
    background-color: var(--colorPrincipal);
    font-weight: $fuentePrincipalPeso;
    color: white;
    width: 50%;
    text-align: center;
    width: 100%;
    margin: 1em 0;
    display: block;

    &:hover {
      opacity: 0.8;
      color: white;
    }

    &.proceso {
      background-color: $colorOscuro2;
    }
  }

  #portada {
    display: flex;
    flex-direction: column;
    justify-content: space-between;

    .imagen {
      img {
        max-height: 80vh;
        width: auto;
      }
    }

    .contenidoPortada {
      flex-basis: 50%;
      padding: 2em 10%;
      margin: auto;
    }
  }

  .contenidoProyecto {
    padding: 0em 2em;

    .contenedorVideo169 {
      width: 100%;
      padding-top: 56.25%;
      position: relative;

      iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    }
  }

  #visualizadorImagen {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 9999;
    height: 100%;
    width: 100%;
    display: none;
    background-color: rgba(255, 255, 255, 0.98);

    &.visible {
      display: flex;
    }
  }

  #imagenGrande {
    width: 100%;
    height: 100vh;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
  }

  .botonesDerecha {
    display: flex;
    flex-direction: column;

    #botonSiguiente {
      height: 100%;
    }
  }

  #cerrar {
    font-size: 1.5em;
    padding: 0.5em;
    text-align: center;
    background-color: var(--colorPrincipal);
    color: white;
    margin-bottom: 3px;
    cursor: pointer;

    &:hover {
      background-color: color.scale($colorPrincipal, $lightness: 70%);
    }
  }

  .botonGaleria {
    cursor: pointer;
    font-size: 2em;
    display: flex;
    align-items: center;
    padding: 0 0.7em;
    background-color: var(--colorPrincipal);
    color: white;
    transition: all 0.3s ease-out;

    &:hover {
      background-color: color.scale($colorPrincipal, $lightness: 70%);
    }
  }

  @media (min-width: $minTablet) {
    .contenidoProyecto {
      padding: 3em 4em;
      width: 90vw;
    }
  }
  @media (min-width: $minPantalla) {
    #portada {
      display: flex;
      flex-direction: row;

      .contenidoPortada {
        flex-basis: 50%;
        padding: 4em 5%;
        margin: auto;
      }
    }
    .contenidoProyecto {
      padding: 3em 4em;
      width: 90vw;
    }
  }
</style>

<style lang="scss" is:global>
  @use '@/scss/constantes' as *;

  .contenidoProyecto {
    ul {
      list-style: circle;
      margin-left: 20px;
    }

    .contenedorVideo169 {
      width: 100%;
      padding-top: 56.25%;
      position: relative;

      iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    }

    pre {
      width: 80vw;
      margin: 1em 0;
    }

    h3 {
      margin-top: 1.5em;
    }

    .fotoSingular {
      width: 40vw;
      margin: 1em;
    }

    .galeria {
      margin: 1em 0;
      display: flex;
      flex-wrap: wrap;
    }

    .imagenGaleria {
      cursor: pointer;
      margin: 0.5em;
      max-height: 250px;

      &:hover {
        opacity: 0.8;
      }
    }
  }

  @media (min-width: $minPantalla) {
    .contenidoProyecto {
      p {
        padding: 1em;
        margin-top: 0;
      }

      h2 {
        padding: 20px;
      }
    }
  }
</style>
