---
import Plantilla from '@/plantillas/Plantilla.astro';
import IconoEnflujo from '@/componentes/svg/IconoEnflujo.astro';
import { gql, obtenerDatos, urlImagen } from '@/utilidades/ayudas';

const Proyectos = gql`
  query {
    paginas(filter: { slug: { _eq: "proyectos" }, status: { _eq: "published" } }, limit: 1) {
      titulo
      slug
      descripcion
      contenido
      banner {
        id
        title
      }
    }

    proyectos(filter: { status: { _eq: "published" } }, sort: ["-date_created"]) {
      titulo
      slug
      descripcion
      fecha_publicacion
      estado
      date_created
      fecha_inicio
      enlace
      repos
      temas {
        glosario_id(filter: { status: { _eq: "published" } }) {
          titulo
        }
      }
      banner {
        id
        title
      }
    }
  }
`;
const datos = await obtenerDatos(Proyectos);

const dimsImg = { ancho: '630', alto: '350' };
const pagina = datos.paginas.length && datos.paginas[0].slug ? datos.paginas[0] : null;
let proyectos = [];
const temas = new Set();

if (datos.proyectos && datos.proyectos.length) {
  const cache = datos.proyectos.map((proyecto) => {
    proyecto.fecha_publicacion = proyecto.fecha_publicacion ? new Date(proyecto.fecha_publicacion) : null;
    proyecto.date_created = proyecto.date_created ? new Date(proyecto.date_created) : null;
    proyecto.fecha = proyecto.fecha_publicacion ? proyecto.fecha_publicacion : new Date(proyecto.fecha_inicio);

    if (proyecto.temas) {
      proyecto.temas = proyecto.temas
        .map((tema) => (tema.glosario_id ? tema.glosario_id.titulo : null))
        .filter(Boolean);
    }
    return proyecto;
  });

  cache.forEach((proyecto) => {
    if (proyecto.temas && proyecto.temas.length) {
      proyecto.temas.forEach((tema) => {
        temas.add(tema);
      });
    }
  });

  proyectos = cache;
}

const formatoFecha = (fecha) => {
  return fecha.toLocaleString('es-CO', {
    timezone: 'America/Bogota',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

const texto = (estado, fecha) => (estado === 'terminado' ? `Publicado el ${formatoFecha(fecha)}` : 'En proceso');
---

<Plantilla titulo={pagina.titulo} descripcion={pagina.descripcion} banner={pagina.banner}>
  <main id="archivoProyectos" class="pagina">
    <section class="inicioPagina contenedorFluido">
      <h1 class="tituloPagina">{pagina.titulo}</h1>
      <!-- <div v-if="pagina.contenido" v-html="$md.render(pagina.contenido)"></div> -->

      <!-- <nav v-if="temas && temas.size" id="filtros">
        <p class="intertitulo">Filtrar por temas:</p>
        <ul :class="filtroActivo ? 'activo' : ''">
          <li
            v-for="(tema, i) in temas"
            :key="`tema${i}`"
            class="tema"
            :class="temasSeleccionados.has(tema) ? 'actual' : ''"
            @click="filtrarPorTema(tema)"
          >
            {{ tema }}
          </li>
        </ul>
      </nav> -->
    </section>

    <div class="contenedorProyectos">
      {
        proyectos.map((proyecto) => (
          <div class="proyecto">
            <div class="contenedorImg">
              <a class="enlaceImg" href={`/proyectos/${proyecto.slug}`}>
                <img
                  class="perezoso"
                  src={`data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 ${dimsImg.ancho} ${dimsImg.alto}'%3E%3C/svg%3E`}
                  data-src={urlImagen(proyecto.banner.id, {
                    width: '667',
                    height: '350',
                    quality: '90',
                    format: 'webp',
                  })}
                  alt={proyecto.banner.title}
                  width={dimsImg.ancho}
                  height={dimsImg.alto}
                />
              </a>
            </div>

            <section class="contenedorDescripcion">
              <a class="titulo" href={`/proyectos/${proyecto.slug}`}>
                <h2>{proyecto.titulo}</h2>
              </a>

              <div class="descripcion seccionDescripcion">
                <div class="fecha" class={proyecto.estado}>
                  <p id="textoEstado">{texto(proyecto.estado, proyecto.fecha)}</p>
                  <img
                    class="enflujoPunto"
                    src="/imgs/EnFlujo_punto_v61.svg"
                    alt="Icono separador entre fecha y hace cuanto se realizó el proyecto."
                  />
                  <span class="notaEnFlujo" data-fecha={proyecto.fecha} />
                </div>

                <p>{proyecto.descripcion}</p>

                {!!proyecto.enlace && (
                  <a class={`enlace ${proyecto.estado}`} href={proyecto.enlace} target="_blank">
                    Ver Proyecto
                  </a>
                )}
              </div>

              <div class="repos">
                <p class="interTitulo">Código:</p>
                {proyecto.repos.map((repo) => (
                  <div class="repo">
                    <img class="iconoRed" src="/imgs/github.svg" />
                    <a class="repoNombre" href={repo.url} target="_blank" rel="external">
                      {repo.nombre}
                    </a>
                  </div>
                ))}
              </div>
            </section>
          </div>
        ))
      }
    </div>
  </main>
</Plantilla>

<script>
  import { duranteInterseccion } from '@/utilidades/observador';
  import { calcularDiferenciaFecha } from '@/utilidades/ayudas';

  const imagenes = document.querySelectorAll('.perezoso');
  const cuandoEsVisible = (imagen: HTMLImageElement) => {
    imagen.src = imagen.dataset.src;
  };

  imagenes.forEach((imagen: HTMLImageElement) => {
    duranteInterseccion(imagen, cuandoEsVisible, true, { threshold: 0.1 });
  });

  const fechasEnFlujo = document.querySelectorAll('.notaEnFlujo');
  fechasEnFlujo.forEach((elemento: HTMLElement) => {
    const fechaInicio = new Date(elemento.dataset.fecha);
    elemento.innerText = `hace ${calcularDiferenciaFecha(fechaInicio)}`;
  });
</script>

<style lang="scss">
  @import '../../scss/_constantes.scss';
  @import '../../scss/_mixins.scss';

  .proyecto,
  .contenedorFluido {
    width: 95vw;
  }

  .proyecto {
    display: flex;
    flex-direction: column;
  }

  .contenedorImg {
    a {
      display: block;
      line-height: 0;
    }

    img {
      height: auto;
      width: 100%;
    }
  }

  .contenedorDescripcion {
    font-size: 0.8em;
    display: flex;
    flex-direction: column;
    margin-top: 1em;
    border-bottom: 2px solid;

    .titulo,
    .titulo:link {
      color: black;
      padding: 0.8em 1.8em 0.8em 0.8em;
      margin-bottom: 0.5em;
      transition: 0.2s ease-in-out opacity;
      margin-left: -1em;
      @include tituloMarco;
      &:hover {
        opacity: 0.6;
      }
      h2 {
        font-size: 1.1em;
      }
    }

    .fecha {
      font-weight: $fuentePrincipalBold;
      font-style: italic;
    }

    p {
      margin: 1em 0;
      line-height: 1.4;
    }
    .seccionDescripcion {
      margin: 0.5em 0;
    }
  }

  .enlace,
  .enlace:link {
    padding: 0.5em;
    background-color: $colorPrincipal;
    color: white;
    width: 50%;
    text-align: center;
    font-weight: $fuentePrincipalPeso;

    &:hover {
      opacity: 0.8;
    }

    &.proceso {
      background-color: $colorOscuro2;
    }
  }

  .repos {
    align-items: flex-end;
    flex: 1;
  }

  .fecha {
    display: flex;
    align-items: center;
    p {
      margin: 0;
    }
    &.proceso {
      color: $colorOscuro2;
    }
  }

  .notaEnFlujo {
    font-size: 0.85em;
    color: #757575;
  }

  .enflujoPunto {
    margin: 0 0.3em;
    width: 1em;
  }

  .repos {
    display: flex;
    align-items: center;
    .interTitulo {
      margin: 0 0.5em 0 0;
      width: auto;
      line-height: 1.25;
    }
    .repo {
      margin-right: 1em;
      display: flex;
      align-items: center;
    }
    .iconoRed {
      width: 15px;
    }
    .repoNombre {
      margin-left: 0.3em;
    }
  }

  .proyecto {
    margin-bottom: 4em;
  }

  #filtros {
    font-size: 0.9em;
    left: 0;

    .intertitulo {
      font-weight: $fuentePrincipalBold;
    }

    ul {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;

      &.activo {
        li {
          opacity: 0.5;

          &:hover {
            opacity: 1;
          }
        }
      }

      li {
        cursor: pointer;
        margin-right: 0.3em;
        font-style: italic;

        &:hover {
          color: $colorPrincipal;
        }

        &.actual {
          opacity: 1;

          &:hover {
            color: $colorOscuro;
          }
        }
      }
    }
  }

  .contenedorProyectos {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  // Teléfonos horizontal
  @media (min-width: $minCelular) {
    .proyecto,
    .contenedorFluido {
      width: 80vw;
    }
  }

  // Pantallas medianas (Tablets)
  @media (min-width: $minTablet) {
    .contenedorFluido {
      width: 95vw;
    }
    .proyecto {
      flex-direction: row;
      width: 95vw;
    }
    .contenedorImg {
      width: 50%;
    }
    .contenedorDescripcion {
      width: 50%;
      margin-left: 1em;
      margin-top: 0;
    }
  }

  // Dispositivos grandes y pantallas medianas
  @media (min-width: $minPantalla) {
    .proyecto,
    .contenedorFluido {
      width: 90vw;
    }
  }

  // Pantallas grandes
  @media (min-width: $minPantallaGrande) {
    .proyecto,
    .contenedorFluido {
      width: 70vw;
      max-width: 1200px;
    }
  }
</style>
