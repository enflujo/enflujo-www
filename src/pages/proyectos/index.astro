---
import Plantilla from '@/plantillas/Plantilla.astro';
import { gql, obtenerDatos } from '@/utilidades/ayudas';
import Tarjeta from '@/componentes/Tarjeta.astro';

const Proyectos = gql`
  query {
    paginas(filter: { slug: { _eq: "proyectos" }, estado: { _eq: "publicado" } }, limit: 1) {
      titulo
      slug
      descripcion
      contenido
      banner {
        id
        title
      }
    }

    proyectos(filter: { estado: { _eq: "publicado" } }, sort: ["-date_created"]) {
      titulo
      slug
      descripcion
      fecha_publicacion
      date_created
      fecha_inicio
      enlace
      repos
      temas {
        glosario_id(filter: { estado: { _eq: "publicado" } }) {
          titulo
        }
      }
      banner {
        id
        title
      }
    }
  }
`;
const datos = await obtenerDatos(Proyectos);
const pagina = datos.paginas.length && datos.paginas[0].slug ? datos.paginas[0] : null;
let proyectos = [];
const temas = new Set();

if (datos.proyectos && datos.proyectos.length) {
  const cache = datos.proyectos.map((proyecto) => {
    proyecto.fecha_publicacion = proyecto.fecha_publicacion ? new Date(proyecto.fecha_publicacion) : null;
    proyecto.date_created = proyecto.date_created ? new Date(proyecto.date_created) : null;
    proyecto.fecha_inicio = proyecto.fecha_inicio ? new Date(proyecto.fecha_inicio) : null;
    proyecto.terminado = !!proyecto.fecha_publicacion;

    if (proyecto.temas) {
      proyecto.temas = proyecto.temas
        .map((tema) => (tema.glosario_id ? tema.glosario_id.titulo : null))
        .filter(Boolean);
    }
    return proyecto;
  });

  cache.forEach((proyecto) => {
    if (proyecto.temas && proyecto.temas.length) {
      proyecto.temas.forEach((tema) => {
        temas.add(tema);
      });
    }
  });

  proyectos = cache;
}

const formatoFecha = (fecha: Date) => {
  return fecha.toLocaleString('es-CO', {
    timeZone: 'America/Bogota',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

const texto = (estado: boolean, fecha: Date) => (estado ? `Publicado el ${formatoFecha(fecha)}` : 'En proceso');
---

<Plantilla titulo={pagina.titulo} descripcion={pagina.descripcion} banner={pagina.banner}>
  <main id="archivoProyectos" class="pagina">
    <section class="inicioPagina">
      <h1 class="tituloPagina">{pagina.titulo}</h1>
      <!-- <div v-if="pagina.contenido" v-html="$md.render(pagina.contenido)"></div> -->

      <!-- <nav v-if="temas && temas.size" id="filtros">
        <p class="intertitulo">Filtrar por temas:</p>
        <ul :class="filtroActivo ? 'activo' : ''">
          <li
            v-for="(tema, i) in temas"
            :key="`tema${i}`"
            class="tema"
            :class="temasSeleccionados.has(tema) ? 'actual' : ''"
            @click="filtrarPorTema(tema)"
          >
            {{ tema }}
          </li>
        </ul>
      </nav> -->
    </section>

    <div class="contenedorProyectos">
      {
        proyectos.map((proyecto) => (
          <Tarjeta datos={proyecto}>
            <div class="descripcion seccionDescripcion">
              <div class={`fecha ${proyecto.terminado ? 'terminado' : ''}`}>
                <p class="textoEstado">
                  {texto(proyecto.terminado, proyecto.fecha_publicacion || proyecto.fecha_inicio)}
                </p>
                <img
                  class="enflujoPunto"
                  src="/imgs/EnFlujo_punto_v61.svg"
                  alt="Icono separador entre fecha y hace cuanto se realizó el proyecto."
                />
                <span class="notaEnFlujo" data-fecha={proyecto.fecha_publicacion || proyecto.fecha_inicio} />
              </div>

              <p>{proyecto.descripcion}</p>

              {!!proyecto.enlace && (
                <a class={`enlace ${proyecto.estado}`} href={proyecto.enlace} target="_blank">
                  Ver Proyecto
                </a>
              )}
            </div>

            <div class="repos">
              <p class="interTitulo">Código:</p>
              {proyecto.repos.map((repo) => (
                <div class="repo">
                  <img class="iconoRed" src="/imgs/github.svg" alt="Icono GitHub" />
                  <a class="repoNombre" href={repo.url} target="_blank" rel="external">
                    {repo.nombre}
                  </a>
                </div>
              ))}
            </div>
          </Tarjeta>
          // <div class="proyecto">
          //   <div class="contenedorImg">
          //     <a class="enlaceImg" href={`/proyectos/${proyecto.slug}`}>
          //       <img
          //         class="perezoso"
          //         src={`data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 ${dimsImg.ancho} ${dimsImg.alto}'%3E%3C/svg%3E`}
          //         data-src={urlImagen(proyecto.banner.id, {
          //           width: '667',
          //           height: '350',
          //           quality: '90',
          //           format: 'webp',
          //         })}
          //         alt={proyecto.banner.title}
          //         width={dimsImg.ancho}
          //         height={dimsImg.alto}
          //       />
          //     </a>
          //   </div>

          //   <section class="contenedorDescripcion">
          //     <a class="titulo" href={`/proyectos/${proyecto.slug}`}>
          //       <h2>{proyecto.titulo}</h2>
          //     </a>

          //   </section>
          // </div>
        ))
      }
    </div>
  </main>
</Plantilla>

<script>
  import { duranteInterseccion } from '@/utilidades/observador';
  import { calcularDiferenciaFecha } from '@/utilidades/ayudas';

  const imagenes = document.querySelectorAll('.perezoso');
  const cuandoEsVisible = (imagen: HTMLImageElement) => {
    imagen.src = imagen.dataset.src;
  };

  imagenes.forEach((imagen: HTMLImageElement) => {
    duranteInterseccion(imagen, cuandoEsVisible, true, { threshold: 0.1 });
  });

  const fechasEnFlujo = document.querySelectorAll('.notaEnFlujo');
  fechasEnFlujo.forEach((elemento: HTMLElement) => {
    const fechaInicio = new Date(elemento.dataset.fecha);
    elemento.innerText = `hace ${calcularDiferenciaFecha(fechaInicio)}`;
  });
</script>

<style lang="scss">
  @import '../../scss/_constantes.scss';
  @import '../../scss/_mixins.scss';

  .enlace,
  .enlace:link {
    padding: 0.5em;
    background-color: $colorPrincipal;
    color: white;
    width: 50%;
    text-align: center;
    font-weight: $fuentePrincipalPeso;

    &:hover {
      opacity: 0.8;
    }

    &.proceso {
      background-color: $colorOscuro2;
    }
  }

  .repos {
    align-items: flex-end;
    flex: 1;
    margin: 0.5em 0;
  }

  .fecha {
    display: flex;
    align-items: center;
    p {
      margin: 0;
    }
    &.proceso {
      color: $colorOscuro2;
    }
  }

  .notaEnFlujo {
    font-size: 0.85em;
    color: #757575;
  }

  .enflujoPunto {
    margin: 0 0.6em;
    width: 1.3em;
  }

  .repos {
    display: flex;
    align-items: center;

    .interTitulo {
      margin: 0 0.5em 0 0;
      width: auto;
      line-height: 1.25;
    }
    .repo {
      margin-right: 1em;
      display: flex;
      align-items: center;
    }
    .iconoRed {
      width: 15px;
    }
    .repoNombre {
      margin-left: 0.3em;
    }
  }

  #filtros {
    font-size: 0.9em;
    left: 0;

    .intertitulo {
      font-weight: $fuentePrincipalBold;
    }

    ul {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;

      &.activo {
        li {
          opacity: 0.5;

          &:hover {
            opacity: 1;
          }
        }
      }

      li {
        cursor: pointer;
        margin-right: 0.3em;
        font-style: italic;

        &:hover {
          color: $colorPrincipal;
        }

        &.actual {
          opacity: 1;

          &:hover {
            color: $colorOscuro;
          }
        }
      }
    }
  }

  .contenedorProyectos {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    justify-content: space-around;
  }
</style>
