---
import Plantilla from '@/plantillas/Plantilla.astro';
import type { Evento } from '@/tipos';
import { gql, obtenerDatos, urlImagen } from '@/utilidades/ayudas';
import { marked } from 'marked';

export async function getStaticPaths() {
  const Eventos = gql`
    query {
      eventos(filter: { estado: { _eq: "publicado" } }, sort: ["-fecha_inicio"]) {
        slug
      }
    }
  `;
  const { eventos } = await obtenerDatos<{ eventos: { slug: string }[] }>(Eventos);

  return eventos.map(({ slug }) => {
    return { params: { slug } };
  });
}

const { slug } = Astro.params;

const Evento = gql`
  query {
    eventos(filter: { slug: { _eq: "${slug}" }, estado: {_eq: "publicado"} }, limit: 1) {
      titulo
      slug
      descripcion
      contenido
      enlace
      imagen {
        id
        title
      }
    }
  }
`;

const { eventos } = await obtenerDatos<{ eventos: Evento[] }>(Evento);
let pagina;

if (eventos && eventos.length) {
  pagina = eventos[0];
} else {
  return Astro.redirect('/404');
}
---

<Plantilla titulo={pagina.titulo} descripcion={pagina.descripcion} imagen={pagina.imagen}>
  <main class="pagina">
    <h1 class="tituloPagina">{pagina.titulo}</h1>
    <div class="contenidoEvento">
      <Fragment set:html={marked.parse(pagina.contenido)} />
    </div>
    <section class="contenedorFluido">
      <div>
        {
          pagina.imagen && pagina.imagen.id && (
            <img
              src={urlImagen(pagina.imagen.id, {
                width: 1200,
                height: 630,
                quality: 90,
                format: 'webp',
              })}
              alt={pagina.imagen.title}
              width="1200"
              height="630"
            />
          )
        }
      </div>
    </section>
  </main>
</Plantilla>

<style lang="scss">
  @use '@/scss/constantes' as *;

  .titulo {
    font-size: 1.6em;
    padding: 0.3em 1.3em 0.5em 0.3em;
    margin-bottom: 1em;
  }
  .tituloPagina {
    padding: 0.5em 0.3em 0.7em 1em;
    width: 100%;
  }
  .contenidoEvento {
    padding: 0.5em 1.8em 0.5em 1.8em;
    font-size: 0.95em;
  }

  .seccionProyecto {
    margin-top: 1em;
  }

  img {
    margin-top: 3vh;
    max-width: calc(100vw - 106px);
    height: auto;
    margin-bottom: -5px;
  }
  .enlace {
    padding: 0.5em;
    background-color: $colorPrincipal;
    font-weight: $fuentePrincipalPeso;
    color: white;
    width: 50%;
    text-align: center;
    width: 100%;
    margin: 1em 0;
    display: block;

    &:hover {
      opacity: 0.8;
    }

    &.proceso {
      background-color: $colorOscuro2;
    }
  }

  // Tel√©fonos horizontal
  @media (min-width: $minCelular) {
    .contenidoEvento {
      padding: 1em 3em 0.5em 3em;
      font-size: 0.95em;
    }
    img {
      margin-top: 3vh;
      max-width: calc(80vw);
      height: auto;
      margin-bottom: 1vh;
    }
  }
  // Pantallas medianas (Tablets)
  @media (min-width: $minTablet) {
  }

  // Dispositivos grandes . Pantalla
  @media (min-width: $minPantalla) {
    img {
      max-width: 80vw;
      display: inline;
      margin-bottom: -6px;
    }

    .contenedorFluido {
      width: 80vw;
    }
  }

  // Pantallas grandes
  @media (min-width: $minPantallaGrande) {
    main {
      display: flex;
      flex-direction: row;
    }
    .tituloPagina {
      // padding-left corresponde al lado derecho, o sea, la parte de abajo de la palabra.
      padding-left: 14px;
      // padding-top corresponde al lado inferior, o sea, al comienzo de la frase
      padding-top: 30px;
      // padding-top corresponde al lado inferior, o sea, al comienzo de la frase
      padding-bottom: 20px;
      writing-mode: vertical-rl;
      transform: rotate(180deg);

      width: unset;
    }
    h1 {
      margin: 0;
    }

    .contenidoEvento {
      margin: 8vh 5vw 5vh 4vw;
      max-width: 40vw;
    }

    img {
      margin-top: 10vh;

      max-width: 30vw;
    }
  }
  @media (min-width: $minPantallaGigante) {
    img {
      max-width: 36vw;
    }
  }
</style>
