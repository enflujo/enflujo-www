---
import '@/scss/estilosGlobales.scss';
import Menus from '@/componentes/Menus.astro';
import { apiBase, crearTitulo, gql, obtenerDatos, quitarExtension } from '@/utilidades/ayudas';

const { titulo, descripcion, imagen } = Astro.props;
const ruta = new URL(Astro.url.pathname, Astro.site);
const tituloPagina = crearTitulo(titulo);
const img = { url: null, titulo: '', ancho: '1200', alto: '630' };

if (imagen && imagen.id) {
  const nombreArchivo = quitarExtension(imagen.filename_download || 'EnFlujo');
  img.url = `${apiBase}/assets/${imagen.id}/${nombreArchivo}.webp?key=og-imagen`;
  img.titulo = imagen.title;
} else {
  img.url = `${Astro.site}/imgs/og-EnFlujo-predeterminado.jpg`;
  img.titulo = tituloPagina;
}

const General = gql`
  query {
    general {
      color
    }
  }
`;

const { general } = await obtenerDatos(General);
const colorPrincipal = general.color;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/sitio.webmanifest" />
    <link rel="canonical" href={ruta.href} />
    <title>{tituloPagina}</title>
    <meta name="description" content={descripcion} />
    <!-- OpenGraph -->
    <meta property="og:locale" content="es_CO" />
    <meta property="og:site_name" content="EnFlujo" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={ruta.href} />
    <meta property="og:title" content={tituloPagina} />
    <meta property="og:description" content={descripcion} />
    <meta property="og:image" content={img.url} />
    <meta property="og:image:alt" content={img.titulo} />
    <meta property="og:image:width" content={img.ancho} />
    <meta property="og:image:height" content={img.alto} />
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@labenflujo" />
    <meta name="twitter:creator" content="@labenflujo" />
    <meta name="twitter:url" content={ruta.href} />
    <meta name="twitter:title" content={tituloPagina} />
    <meta name="twitter:description" content={descripcion} />
    <meta name="twitter:image" content={img.url} />
    <meta name="twitter:image:alt" content={img.titulo} />
    <link rel="stylesheet" href="https://use.typekit.net/ksv6tvg.css" />

    {
      import.meta.env.PROD && (
        <script
          async
          defer
          data-website-id="569a36fc-18d4-4ee4-a40c-7c7a9a35b3a1"
          src="https://analitica.enflujo.com/script.js"
          data-domains="enflujo.com"
        />
      )
    }
  </head>

  <body>
    <Menus />
    <slot />

    <div id="marco">
      <span id="marcoSuperior" class="seccionMarco"></span>
      <span id="marcoInferior" class="seccionMarco"></span>
      <div id="marcoIzq" class="seccionMarco">
        <div class="flujo">
          <p class="copy">EnFlujo</p>
          <p id="fecha" class="copy fecha"></p>
        </div>
      </div>
      <span id="marcoDer" class="seccionMarco"></span>
    </div>
    <canvas id="lienzo"></canvas>
    <script src="./programa.js"></script>
  </body>
</html>

<script>
  import { duranteInterseccion } from '@/utilidades/observador';
  import { calcularDiferenciaFecha } from '@/utilidades/ayudas';
  const imagenes = document.querySelectorAll('.perezoso');

  const cuandoEsVisible = (imagen: HTMLImageElement) => {
    imagen.src = imagen.dataset.src;
  };

  imagenes.forEach((imagen: HTMLImageElement) => {
    duranteInterseccion(imagen, cuandoEsVisible, true, { threshold: 0.1 });
  });

  const fechasEnFlujo = document.querySelectorAll('.notaEnFlujo');

  if (fechasEnFlujo.length) {
    fechasEnFlujo.forEach((elemento: HTMLElement) => {
      const fechaInicio = new Date(elemento.dataset.fecha);
      elemento.innerText = `hace ${calcularDiferenciaFecha(fechaInicio)}`;
    });
  }

  import { distanciaEntreCoordenadas } from '@/utilidades/ayudas';

  async function inicio() {
    const respuestaIP = await fetch('http://ip-api.com/json');
    const usuario = await respuestaIP.json();
    const coordenadasEnflujo = [4.601247143009991, -74.06408649525687];
    const distancia = distanciaEntreCoordenadas(usuario.lat, usuario.lon, coordenadasEnflujo[0], coordenadasEnflujo[1]);

    const lienzo = document.getElementById('lienzo') as HTMLCanvasElement;
    if (!lienzo) return;

    const ctx = lienzo.getContext('2d');

    function actualizar() {
      lienzo.width = lienzo.clientWidth;
      lienzo.height = lienzo.clientHeight;
      ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--colorPrincipal');
      ctx.lineWidth = 5;
      // ctx.globalAlpha = 0.5;

      const pos = { x: 84, y: 83 };
      const dims = { ancho: 80, alto: 108 };
      const centro = { x: pos.x + dims.ancho / 2, y: pos.y + dims.alto / 2 };
      // const logo = new Path2D(
      //   'M285.43 467.1c-1.58 0-3.16-.41-4.57-1.23l-173.6-100.72a9.094 9.094 0 0 1-4.53-7.87V155.82c0-3.25 1.73-6.25 4.54-7.88L280.98 47.23a9.108 9.108 0 0 1 9.09-.03l88.55 50.69c4.36 2.5 5.88 8.06 3.38 12.42-2.5 4.36-8.06 5.88-12.42 3.38l-84-48.09-164.65 95.47v190.96l164.51 95.45 95.94-55.32-38.73-23.34-52.64 30.73a9.127 9.127 0 0 1-9.28-.06l-113.16-67.98a9.113 9.113 0 0 1-4.42-7.8v-134.3a9.08 9.08 0 0 1 4.54-7.87l113.16-65.62c4.35-2.52 9.92-1.04 12.44 3.31 2.52 4.35 1.04 9.92-3.31 12.44l-108.62 62.99v123.9l104.12 62.55 39.39-23-44.15-26.6a9.126 9.126 0 0 1-4.41-7.8v-65.68c0-3.22 1.7-6.21 4.48-7.84l116.42-68.62a9.105 9.105 0 0 1 9.14-.06 9.1 9.1 0 0 1 4.59 7.9v134.3c0 3.24-1.72 6.23-4.51 7.86l-45.87 26.79L404 384.53a9.072 9.072 0 0 1 4.4 7.88 9.106 9.106 0 0 1-4.55 7.8l-113.88 65.67a9.133 9.133 0 0 1-4.55 1.22Zm9.1-148.53 48.27 29.08 49.95-29.17V205.34l-98.22 57.89v55.34Z'
      // );
      // ctx.fill(logo);
      ctx.beginPath();
      ctx.moveTo(centro.x + 9, centro.y - 35);
      // ctx.fillRect(pos.x, pos.y, dims.ancho, dims.alto);
      ctx.lineTo(centro.x - 21, centro.y - 17);
      ctx.lineTo(centro.x - 21, centro.y + 16);
      ctx.lineTo(centro.x + 8, centro.y + 34);
      ctx.lineTo(centro.x + 38, centro.y + 17);
      ctx.lineTo(centro.x + 38, centro.y - 17);
      ctx.lineTo(centro.x + 8, centro.y);
      ctx.lineTo(centro.x + 8, centro.y + 19);

      ctx.stroke();
    }

    document.body.addEventListener('mousemove', (evento) => {
      const { clientX, clientY } = evento;
      console.log(clientX, clientY);
      // ctx.beginPath();
      // ctx.moveTo(100, 100);
      // ctx.lineTo(clientX - 50, clientY - 50);
      // ctx.stroke();
    });

    actualizar();
    window.onresize = actualizar;
  }

  inicio();
</script>

<style lang="scss" is:global define:vars={{ colorPrincipal }}>
  @use 'sass:color';
  .enflujoLogo {
    border: 1px solid;
    opacity: 0.5;
  }
  :root {
    --colorPrincipal: colorPrincipal;
  }

  .notaEnFlujo {
    font-weight: normal;
    font-size: 0.85em;
    color: #757575;
  }
</style>

<style lang="scss">
  @use 'sass:color';
  @import '../scss/_constantes.scss';
  #lienzo {
    position: fixed;
    top: 50px;
    left: 50px;
    display: inline-block;
    vertical-align: top;
    pointer-events: none;
    width: calc(100% - 100px);
    height: calc(100vh - 100px);
  }
  #contenedor {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  main {
    margin: $anchoMarco;
    flex-grow: 1;
  }

  .flujo {
    font-size: 0.6em;
    left: 20px;
    bottom: 38px;
    transform-origin: left;
    transform: rotate(270deg);
    position: fixed;

    p {
      margin: 4px 0px -7px 0;
    }
  }
</style>
