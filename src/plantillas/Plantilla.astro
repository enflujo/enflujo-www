---
import '@/scss/estilosGlobales.scss';
import Menus from '@/componentes/Menus.astro';
import { apiBase, crearTitulo, gql, obtenerDatos, quitarExtension } from '@/utilidades/ayudas';

const { titulo, descripcion, imagen } = Astro.props;
const ruta = new URL(Astro.url.pathname, Astro.site);
const tituloPagina = crearTitulo(titulo);
const img = { url: '', titulo: '', ancho: '1200', alto: '630' };

if (imagen && imagen.id) {
  const nombreArchivo = quitarExtension(imagen.filename_download || 'EnFlujo');
  img.url = `${apiBase}/assets/${imagen.id}/${nombreArchivo}.webp?key=og-imagen`;
  img.titulo = imagen.title;
} else {
  img.url = `${Astro.site}/imgs/og-EnFlujo-predeterminado.jpg`;
  img.titulo = tituloPagina;
}

const General = gql`
  query {
    general {
      color
    }
  }
`;

const { general } = await obtenerDatos<{ general: { color: string } }>(General);
const colorPrincipal = general.color;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/sitio.webmanifest" />
    <link rel="canonical" href={ruta.href} />
    <title>{tituloPagina}</title>
    <meta name="description" content={descripcion} />
    <!-- OpenGraph -->
    <meta property="og:locale" content="es_CO" />
    <meta property="og:site_name" content="EnFlujo" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={ruta.href} />
    <meta property="og:title" content={tituloPagina} />
    <meta property="og:description" content={descripcion} />
    <meta property="og:image" content={img.url} />
    <meta property="og:image:alt" content={img.titulo} />
    <meta property="og:image:width" content={img.ancho} />
    <meta property="og:image:height" content={img.alto} />
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@labenflujo" />
    <meta name="twitter:creator" content="@labenflujo" />
    <meta name="twitter:url" content={ruta.href} />
    <meta name="twitter:title" content={tituloPagina} />
    <meta name="twitter:description" content={descripcion} />
    <meta name="twitter:image" content={img.url} />
    <meta name="twitter:image:alt" content={img.titulo} />
    <link rel="stylesheet" href="https://use.typekit.net/ksv6tvg.css" />

    {
      import.meta.env.PROD && (
        <script
          is:inline
          async
          defer
          data-website-id="569a36fc-18d4-4ee4-a40c-7c7a9a35b3a1"
          src="https://analitica.enflujo.com/script.js"
          data-domains="enflujo.com"
        />
      )
    }
  </head>

  <body>
    <Menus />
    <slot />

    <div id="marco">
      <span id="marcoSuperior" class="seccionMarco"></span>
      <span id="marcoInferior" class="seccionMarco"></span>
      <div id="marcoIzq" class="seccionMarco">
        <div class="flujo">
          <p class="copy">EnFlujo</p>
          <p id="fecha" class="copy fecha"></p>
        </div>
      </div>
      <span id="marcoDer" class="seccionMarco"></span>
    </div>
    <!-- <canvas id="lienzo"></canvas> -->
    <script src="./programa.ts"></script>
  </body>
</html>

<script>
  import { duranteInterseccion } from '@/utilidades/observador';
  import { calcularDiferenciaFecha, cuandoImagenVisible } from '@/utilidades/ayudas';
  const imagenes = document.querySelectorAll<HTMLImageElement>('.perezoso');

  imagenes.forEach((imagen) => {
    duranteInterseccion(imagen, cuandoImagenVisible, true, { threshold: 0.1 });
  });

  const fechasEnFlujo = document.querySelectorAll<HTMLParagraphElement | HTMLSpanElement>('.notaEnFlujo');

  if (fechasEnFlujo.length) {
    fechasEnFlujo.forEach((elemento) => {
      const { fecha } = elemento.dataset;

      if (fecha) {
        elemento.innerText = `hace ${calcularDiferenciaFecha(new Date(fecha))}`;
      }
    });
  }
</script>

<style lang="scss" is:global define:vars={{ colorPrincipal }}>
  @use 'sass:color';

  :root {
    --colorPrincipal: colorPrincipal;
  }

  .notaEnFlujo {
    font-weight: normal;
    font-size: 0.85em;
    color: #757575;
  }
</style>

<style lang="scss">
  @use 'sass:color';
  @import '@/scss/_constantes.scss';

  #contenedor {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  main {
    margin: var(--anchoMarco);
    flex-grow: 1;
  }

  .flujo {
    font-size: 0.6em;
    left: 20px;
    bottom: 38px;
    transform-origin: left;
    transform: rotate(270deg);
    position: fixed;
    display: flex;

    p {
      margin: 4px 10px 0px 0;
    }
  }

  // Tel√©fonos horizontal
  @media (min-width: $minCelular) {
    .flujo {
      display: block;

      p {
        margin: 4px 0px -7px 0;
      }
    }
  }
</style>
